#!/usr/bin/env ruby

require 'net/https'
require 'uri'
require 'pathname'
require 'base64'
require 'open-uri'
require 'nokogiri'
require 'date'
require 'fileutils'

module Notifier
  SCRIPTS = ENV['RIPDIKO_SCRIPTS'] || "#{ENV['HOME']}/.ripdiko/scripts"

  def notify(hook, args)
    script = "#{SCRIPTS}/#{hook.to_s}"
    if File.executable?(script)
      system build_environment(args), script
    end
  end

  def build_environment(args)
    env = Hash.new
    walk_down(env, args, "RIPDIKO")
    env
  end

  def walk_down(env, value, prefix)
    case value
    when Hash
      value.each do |key, value|
        walk_down(env, value, "#{prefix}_#{key.upcase}")
      end
    when Array
      value.each_with_index do |value, i|
        walk_down(env, value, "#{prefix}_#{i}")
      end
    else
      env[prefix] = value.to_s
    end
  end
end

class DownloadTask
  include Notifier

  PLAYER_URL = "http://radiko.jp/player/swf/player_3.0.0.01.swf"
  TMPDIR = ENV['TMPDIR'] || '/tmp'

  attr_accessor :station, :cache, :buffer, :outdir, :bitrate

  def initialize(station = nil, duration = 1800, *args)
    unless station
      abort "Usage: ripdiko [station-id]"
    end
    @station = station
    @duration = duration
    @cache = CacheDir.new(TMPDIR)
    @buffer = ENV['RIPDIKO_BUFFER'] || 60
    @outdir = ENV['RIPDIKO_OUTDIR'] || "#{ENV['HOME']}/Music/Radiko"
    @bitrate = ENV['RIPDIKO_BITRATE'] || '64k'
  end

  def authenticate
    unless cache['authkey.png'].exist?
      download PLAYER_URL, cache['player.swf']
      system *(%W(swfextract -b 14 #{cache['player.swf']} -o #{cache['authkey.png']}))
    end

    unless cache['authkey.png'].exist?
      abort "failed to extract authkey out of player.swf"
    end

    res = fetch_auth "https://radiko.jp/v2/api/auth1_fms",
      'pragma' => "no-cache",
      'X-Radiko-App' => "pc_1",
      'X-Radiko-App-Version' => "2.0.1",
      'X-Radiko-User' => "test-stream",
      'X-Radiko-Device' => "pc"

    unless token = res['X-Radiko-AuthToken']
      abort "auth1_fms failed"
    end

    length = res['X-Radiko-KeyLength'].to_i
    offset = res['X-Radiko-KeyOffset'].to_i
    partial_key = Base64.strict_encode64(IO.binread(cache['authkey.png'], length, offset))

    res = fetch_auth "https://radiko.jp/v2/api/auth2_fms",
      'pragma' => "no-cache",
      'X-Radiko-App' => "pc_1",
      'X-Radiko-App-Version' => "2.0.1",
      'X-Radiko-User' => "test-stream",
      'X-Radiko-Device' => "pc",
      'X-Radiko-Authtoken' => token,
      'X-Radiko-Partialkey' => partial_key

    if /^(.*),/ === res.body
      token
    else
      abort "auth2 failed. Outside Japan?"
    end
  end

  def val(node, xpath)
    node.xpath(".//#{xpath}").first.content
  end

  def parse_time(str)
    DateTime.strptime("#{str}+0900", "%Y%m%d%H%M%S%Z").to_time
  end

  def area_id
    ENV['RIPDIKO_AREA_ID'] || "JP13" # Tokyo
  end

  def now_playing(station)
    now = Time.now
    doc = Nokogiri::XML(open("http://radiko.jp/v2/api/program/now?area_id=#{area_id}"))

    node = doc.xpath(%Q|//station[@id="#{station}"]|).first
    node.xpath(".//prog").each do |prog|
      from, to = parse_time(prog[:ft]), parse_time(prog[:to])
      start_time = now.to_i + buffer
      if from.to_i <= start_time && start_time < to.to_i
        return Program.new(
          id: "#{prog[:ft]}-#{station}",
          station: val(node, :name),
          title: val(prog, :title),
          from: from,
          to: to,
          duration: prog[:dur].to_i,
          subtitle: val(prog, :sub_title),
          performer: val(prog, :pfm),
          info: val(prog, :info),
        )
      end
    end
  end

  def run
    token = authenticate
    program = now_playing(station)

    duration = program.recording_duration + buffer

    tempfile = "#{TMPDIR}/#{program.id}.mp3"
    puts "Streaming #{program.title} ~ #{program.to.strftime("%H:%M")} (#{duration}s)"
    puts "Ripping audio file to #{tempfile}"

    command = %W(
      rtmpdump --live --quiet
      -r rtmpe://f-radiko.smartstream.ne.jp
      --playpath simul-stream.stream
      --app #{station}/_definst_
      -W #{PLAYER_URL}
      -C S:"" -C S:"" -C S:"" -C S:#{token}
      --live --stop #{duration} -o - |
      ffmpeg -y -i - -vn
      -loglevel error
      -metadata author="#{program.performer}"
      -metadata artist="#{program.station}"
      -metadata title="#{program.title} #{program.effective_date.strftime}"
      -metadata album="#{program.title}"
      -metadata genre=Radio
      -metadata year="#{program.effective_date.year}"
      -acodec libmp3lame -ar 44100 -ab #{bitrate} -ac 2
      #{tempfile}
    )

    system command.join(" ")

    FileUtils.mkpath(outdir)
    File.rename tempfile, "#{outdir}/#{program.id}.mp3"

    notification = {
      :program => {
        title: program.title,
        station: program.station,
        duration: program.duration,
        subtitle: program.subtitle,
        performer: program.performer,
      },
      :recording_time => duration
    }

    notify :recording_finished, notification
  end

  def fetch_auth(url, headers)
    hdrs = headers.map {|k,v| "--header=\"#{k}: #{v}\"" }.join(" ")
    AuthResponse.new(`wget -q #{hdrs} --post-data='\\r\\n' --no-check-certificate --save-headers -O - #{url}`)
  end

  def download(url, path)
    unless path.exist?
      system *(%W(wget -q -O #{path} #{url}))
    end
  end

  def abort(msg)
    puts msg
    exit 1
  end
end

class Program
  attr_accessor :id, :station, :title, :from, :to, :duration, :subtitle, :performer, :info
  def initialize(args = {})
    args.each do |k, v|
      send "#{k}=", v
    end
  end

  def effective_date
    time = from.hour < 5 ? from - 24 * 60 * 60 : from
    Date.new(time.year, time.month, time.day)
  end

  def recording_duration
    (to - Time.now).to_i
  end
end

class AuthResponse
  def initialize(payload)
    unless payload.valid_encoding?
      default_encoding = payload.encoding
      payload.force_encoding(Encoding::UTF_8)
      payload.force_encoding(default_encoding) unless payload.valid_encoding?
    end

    @payload = payload
  end

  def body
    @payload.split(/\r\n\r\n/, 2)[1]
  end

  def [](name)
    if (match = @payload.scan(/^#{name}[:=] *(\S+)/i).first)
      match[0]
    end
  end
end

class CacheDir
  attr_accessor :dir
  def initialize(dir)
    @dir = dir
    @paths = {}
  end

  def [](name)
    @paths[name] ||= Pathname.new(File.join(@dir, name))
  end
end

DownloadTask.new(*ARGV).run
